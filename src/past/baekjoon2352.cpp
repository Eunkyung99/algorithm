/*
 반도체를 설계할 때 n개의 포트를 다른 n개의 포트와 연결해야 할 때가 있다.
예를 들어 왼쪽 그림이 n개의 포트와 다른 n개의 포트를 어떻게 연결해야 하는지를 나타낸다. 하지만 이와 같이 연결을 할 경우에는 연결선이 서로 꼬이기 때문에 이와 같이 연결할 수 없다. n개의 포트가 다른 n개의 포트와 어떻게 연결되어야 하는지가 주어졌을 때, 연결선이 서로 꼬이지(겹치지, 교차하지) 않도록 하면서 최대 몇 개까지 연결할 수 있는지를 알아내는 프로그램을 작성하시오
첫째 줄에 정수 n(1 ≤ n ≤ 40,000)이 주어진다. 다음 줄에는 차례로 1번 포트와 연결되어야 하는 포트 번호, 2번 포트와 연결되어야 하는 포트 번호, …, n번 포트와 연결되어야 하는 포트 번호가 주어진다. 이 수들은 1 이상 n 이하이며 서로 같은 수는 없다고 가정하자.

첫째 줄에 최대 연결 개수를 출력한다.
 */
#include <iostream>
#include <algorithm>
using namespace std;
int main(){
	int n, length=0;
	int port[40000];
	int dp[40000];
	cin>>n;
	for(int i=0; i<n; i++){
		cin>>port[i];
	}
	dp[0]=port[0];
	for(int i=1; i<n; i++){
		if(dp[length]<port[i]){ //마지막 포트 값보다 더 크면
			length++;
			dp[length]=port[i]; //다음 길이의 dp 배열에 포트 값 대입
		}
		else{
			int index=lower_bound(dp, dp+length, port[i])-dp; //오름차순 정렬되어 있는 dp~dp+length에서 port[i]보다 작은 가장 큰 수의 인덱스 찾기
			dp[index]=port[i]; //index 자리에 포트값 대입
		}
	}
	cout<<length+1; //length+1을 해줘야 함
	return 0;
}
//수행시간:O(nlogn)
