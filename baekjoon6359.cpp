/*
 서강대학교 곤자가 기숙사의 지하에는 n개의 방이 일렬로 늘어선 감옥이 있다. 각 방에는 벌점을 많이 받은 학생이 구금되어있다.

그러던 어느 날, 감옥 간수인 상범이는 지루한 나머지 정신나간 게임을 하기로 결정했다. 게임의 첫 번째 라운드에서 상범이는 위스키를 한 잔 들이키고, 달려가며 감옥을 한 개씩 모두 연다. 그 다음 라운드에서는 2, 4, 6, ... 번 방을 다시 잠그고, 세 번째 라운드에서는 3, 6, 9, ... 번 방이 열려있으면 잠그고, 잠겨있다면 연다. k번째 라운드에서는 번호가 k의 배수인 방이 열려 있으면 잠그고, 잠겨 있다면 연다. 이렇게 n번째 라운드까지 진행한 이후, 상범이는 위스키의 마지막 병을 마시고 쓰러져 잠든다.

구금되어있는 몇 명(어쩌면 0명)의 학생들은 자신의 방을 잠그지 않은 채 상범이가 쓰러져버렸단 것을 깨닫고 즉시 도망친다.

방의 개수가 주어졌을 때, 몇 명의 학생들이 도주할 수 있는지 알아보자.

입력의 첫 번째 줄에는 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄에 한 개씩 방의 개수 n(5 ≤ n ≤ 100)이 주어진다.

한 줄에 한 개씩 각 테스트 케이스의 답, 즉 몇 명이 탈출할 수 있는지를 출력한다.
 */
#include <iostream>
using namespace std;
void escape(int n){
	bool open[n+1]={false,}; //문이 닫혀있는 상태로 초기화
	int dp[n+1]={0,}; //dp는 0으로 초기화
	for(int i=1; i<=n; i++){ //i 라운드 실행
		dp[i]=dp[i-1]; //dp[i-1] 값을 dp[i]에 먼저 저장
		for(int j=1; i*j<=n; j++){ //n이하의 i배수인 방 방문
			if(open[i*j]==true){ //문이 열려있을 때
				open[i*j]=false; //문 닫고
				dp[i]-=1; //탈출 가능한 사람 -1
			}
			else{ //문이 닫혀있을 때
				open[i*j]=true; //문 열고
				dp[i]+=1; //탈출 가능한 사람+1
			}
		}
	}
	cout<<dp[n]<<endl; //dp[n]이 n라운드까지 실행했을 때 탈출 가능한 사람
}
int main(){
	int testcase;
	int tc[100000]; //100으로 설정했을 때 런타임에러
	cin>>testcase;
	for(int i=0; i<testcase; i++){
		cin>>tc[i]; //n 저장
	}
	for(int i=0; i<testcase; i++){
		escape(tc[i]); //저장한 n들에 대해 escape 함수 실행
	}
	return 0;
}
